{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport requests from \"../service/requests\";\nimport useFetchContent from \"./use-fetch-content\";\nconst useFetchAllConent = () => {\n  // using useFecth to get data\n  const [item, setItem] = useState({});\n  const {\n    fetchData: fetchFilmData\n  } = useFetchContent();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const getData = async () => {\n      // take all key to object\n      const fetchPromises = Object.keys(requests).map(async key => {\n        const data = await fetchFilmData(requests[key]);\n        return {\n          [key]: data.results\n        };\n      });\n      // run all promies to get all data\n      const results = await Promise.all(fetchPromises);\n      // merge data to object after set in item\n      const mergedData = Object.assign({}, ...results);\n      setItem(mergedData);\n      setIsLoading(false);\n    };\n    getData();\n  }, [fetchFilmData]);\n  return {\n    isLoading,\n    item\n  };\n};\nexport default useFetchAllConent;","map":{"version":3,"names":["useState","useEffect","requests","useFetchContent","useFetchAllConent","item","setItem","fetchData","fetchFilmData","isLoading","setIsLoading","getData","fetchPromises","Object","keys","map","key","data","results","Promise","all","mergedData","assign"],"sources":["/Users/mac/Library/CloudStorage/OneDrive-IndustrialUniversityofHoChiMinhCity/Documents/Funix_ReactJs/asm2/src/hooks/use-fetch-all-content.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport requests from \"../service/requests\";\nimport useFetchContent from \"./use-fetch-content\";\n\n\nconst useFetchAllConent = () => {\n   // using useFecth to get data\n   const [item, setItem] = useState({});\n   const { fetchData: fetchFilmData } = useFetchContent();\n   const [isLoading, setIsLoading] = useState(true);\n   useEffect(() => {\n      const getData = async () => {\n         // take all key to object\n         const fetchPromises = Object.keys(requests).map(async (key) => {\n            const data = await fetchFilmData(requests[key]);\n            return { [key]: data.results };\n         });\n         // run all promies to get all data\n         const results = await Promise.all(fetchPromises);\n         // merge data to object after set in item\n         const mergedData = Object.assign({}, ...results);\n         setItem(mergedData);\n         setIsLoading(false);\n         \n      };\n      getData();\n   }, [fetchFilmData]);\n\n      return {\n         isLoading,\n         item\n      };\n  \n};\nexport default useFetchAllConent;\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,eAAe,MAAM,qBAAqB;AAGjD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC7B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM;IAAEO,SAAS,EAAEC;EAAc,CAAC,GAAGL,eAAe,CAAC,CAAC;EACtD,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChDC,SAAS,CAAC,MAAM;IACb,MAAMU,OAAO,GAAG,MAAAA,CAAA,KAAY;MACzB;MACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACZ,QAAQ,CAAC,CAACa,GAAG,CAAC,MAAOC,GAAG,IAAK;QAC5D,MAAMC,IAAI,GAAG,MAAMT,aAAa,CAACN,QAAQ,CAACc,GAAG,CAAC,CAAC;QAC/C,OAAO;UAAE,CAACA,GAAG,GAAGC,IAAI,CAACC;QAAQ,CAAC;MACjC,CAAC,CAAC;MACF;MACA,MAAMA,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACR,aAAa,CAAC;MAChD;MACA,MAAMS,UAAU,GAAGR,MAAM,CAACS,MAAM,CAAC,CAAC,CAAC,EAAE,GAAGJ,OAAO,CAAC;MAChDZ,OAAO,CAACe,UAAU,CAAC;MACnBX,YAAY,CAAC,KAAK,CAAC;IAEtB,CAAC;IACDC,OAAO,CAAC,CAAC;EACZ,CAAC,EAAE,CAACH,aAAa,CAAC,CAAC;EAEhB,OAAO;IACJC,SAAS;IACTJ;EACH,CAAC;AAEP,CAAC;AACD,eAAeD,iBAAiB"},"metadata":{},"sourceType":"module"}